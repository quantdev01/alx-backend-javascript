"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var manufacturer_collection_1 = require("./utils/manufacturer_collection");
function process(store) {
    function mapping(callbackfn) {
        var response = [];
        store.forEach(function (collection) {
            var result = callbackfn(collection.data, collection.state);
            if (result !== undefined) {
                response.push(result);
            }
        });
        return response;
    }
    function portal(list, custom) {
        if (!custom) {
            store.forEach(function (collection) {
                collection.hide = true;
            });
            for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                var data = list_1[_i];
                var collection = manufacturer_collection_1.init_collection(data);
                store.set(collection.key, collection);
            }
            return;
        }
        store.forEach(function (collection) {
            collection.hide = true;
        });
        for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {
            var data = list_2[_a];
            var custom_data = custom(data);
            var collection = manufacturer_collection_1.init_collection(custom_data.data, custom_data.helper, custom_data.key);
            var current_collection = store.get(collection.key);
            if (current_collection) {
                current_collection.hide = false;
            }
            else {
                store.set(collection.key, collection);
            }
        }
    }
    function init(list, custom) {
        if (list === void 0) { list = []; }
        store.clear();
        list.forEach(function (data) {
            var collection;
            if (custom) {
                var config = custom(data);
                collection = manufacturer_collection_1.init_collection(config.data, config.helper, config.key);
            }
            else {
                collection = manufacturer_collection_1.init_collection(data);
            }
            store.set(collection.key, collection);
        });
    }
    function confirm(key) {
        var collection = store.get(key + '');
        if (collection) {
            if (collection.pending) {
                collection.state = collection.pending;
            }
            else {
                return false;
            }
            collection.backup = null;
            collection.pending = null;
            return true;
        }
        return false;
    }
    function cancel(key) {
        var collection = store.get(key.toString());
        if (collection) {
            if (collection.pending === 'added' || collection.pending === 'setted') {
                store.delete(key.toString());
                return true;
            }
            if (collection.pending === 'deleted') {
                collection.backup = null;
                collection.pending = null;
                return true;
            }
            if (collection.backup) {
                collection.data = collection.backup;
                collection.backup = null;
                collection.pending = null;
                return true;
            }
            return false;
        }
        else {
            return false;
        }
    }
    return {
        mapping: mapping,
        portal: portal,
        init: init,
        confirm: confirm,
        cancel: cancel
    };
}
exports.default = process;
